{"status": "broken", "description": " Checking if the position of objects changed during pick action i.e. Lucy collided with an obstacle.\n        ", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "complex_test"}, {"name": "subSuite", "value": "TestComplexScenario"}, {"name": "host", "value": "Hyper-Dock"}, {"name": "thread", "value": "17127-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "tests.complex_test"}], "stop": 1608288220351, "uuid": "41392fd0-e4e2-4c92-bf04-1811282260ab", "historyId": "b457f8aad0e9e9a26f13c74fcb0d5b6d", "name": "test_collision_detection_pick", "start": 1608288220292, "fullName": "tests.complex_test.TestComplexScenario#test_collision_detection_pick", "statusDetails": {"message": "ValueError: Can only compare identically-labeled Series objects", "trace": "self = <tests.complex_test.TestComplexScenario instance at 0x7ffb234bf290>\n\n    def test_collision_detection_pick(self):\n        \"\"\" Checking if the position of objects changed during pick action i.e. Lucy collided with an obstacle.\n        \"\"\"\n        # True means no change and false means there is change.\n        x = False\n        y = False\n        z = False\n>       lower_tolerance_difference, upper_tolerance_difference = log_reader_comparator('X-pos', 'pick_action_start', 'pick_action_end')\n\ntests/complex_test.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlogger/data_logger.py:142: in log_reader_comparator\n    newp['8'] = np.where(nswp[loc]-0.05<=newp[loc], 1, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Models\nground_plane    -0.050\nroom            -0.050\ntable964        -0.050\nsh...0.673\nspoon881        -0.556\nplate408         1.030\nName: X-pos, dtype: float64\nother = Models\nground_plane    0.000\nroom            0.000\ntable126        0.000\nshelf... -0.443\nfork333         0.120\nspoon767        0.737\nName: X-pos, dtype: float64\naxis = None\n\n    def wrapper(self, other, axis=None):\n        # Validate the axis parameter\n        if axis is not None:\n            self._get_axis_number(axis)\n    \n        res_name = get_op_result_name(self, other)\n    \n        if isinstance(other, list):\n            # TODO: same for tuples?\n            other = np.asarray(other)\n    \n        if isinstance(other, ABCDataFrame):  # pragma: no cover\n            # Defer to DataFrame implementation; fail early\n            return NotImplemented\n    \n        elif isinstance(other, ABCSeries) and not self._indexed_same(other):\n>           raise ValueError(\"Can only compare identically-labeled \"\n                             \"Series objects\")\nE           ValueError: Can only compare identically-labeled Series objects\n\n/usr/local/lib/python2.7/dist-packages/pandas/core/ops.py:1676: ValueError"}, "attachments": [{"source": "03cdf2af-2cd4-4caa-895a-a8ea24991c28-attachment.txt", "type": "text/plain", "name": "log"}, {"source": "a4c89bca-5966-4c6f-8d07-6372d93ee520-attachment.txt", "type": "text/plain", "name": "stdout"}, {"source": "953519c4-2f90-4517-9497-a15304a782bb-attachment.txt", "type": "text/plain", "name": "stderr"}]}