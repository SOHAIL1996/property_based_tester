{"name": "test_set_up", "status": "broken", "statusDetails": {"message": "rospy.exceptions.ROSInitException: Failed to initialize time. Please check logs for additional details", "trace": "self = <nav_test.TestNavigation object at 0x7f90ea7684c0>\nrandomizer = <function TestNavigation.randomizer.<locals>._parameters at 0x7f90ea757ca0>\n\n    def test_set_up(self,randomizer):\n        \"\"\"Initializing navigation scenario.\n        \"\"\"\n>       rospy.init_node('nav_test')\n\nnav_test.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nname = 'nav_test'\nargv = ['/home/sorox23/.local/lib/python3.8/site-packages/pytest/__main__.py', '--alluredir=results', 'nav_test.py', '-v', '-s']\nanonymous = False, log_level = None, disable_rostime = False, disable_rosout = False\ndisable_signals = False, xmlrpc_port = 0, tcpros_port = 0\n\n    def init_node(name, argv=None, anonymous=False, log_level=None, disable_rostime=False, disable_rosout=False, disable_signals=False, xmlrpc_port=0, tcpros_port=0):\n        \"\"\"\n        Register client node with the master under the specified name.\n        This MUST be called from the main Python thread unless\n        disable_signals is set to True. Duplicate calls to init_node are\n        only allowed if the arguments are identical as the side-effects of\n        this method are not reversible.\n    \n        @param name: Node's name. This parameter must be a base name,\n            meaning that it cannot contain namespaces (i.e. '/')\n        @type  name: str\n    \n        @param argv: Command line arguments to this program, including\n            remapping arguments (default: sys.argv). If you provide argv\n            to init_node(), any previously created rospy data structure\n            (Publisher, Subscriber, Service) will have invalid\n            mappings. It is important that you call init_node() first if\n            you wish to provide your own argv.\n        @type  argv: [str]\n    \n        @param anonymous: if True, a name will be auto-generated for the\n            node using name as the base.  This is useful when you wish to\n            have multiple instances of the same node and don't care about\n            their actual names (e.g. tools, guis). name will be used as\n            the stem of the auto-generated name. NOTE: you cannot remap\n            the name of an anonymous node.\n        @type anonymous: bool\n    \n        @param log_level: log level for sending message to /rosout and log\n            file, which is INFO by default. For convenience, you may use\n            rospy.DEBUG, rospy.INFO, rospy.ERROR, rospy.WARN, rospy.FATAL\n        @type  log_level: int\n    \n        @param disable_signals: If True, rospy will not register its own\n            signal handlers. You must set this flag if (a) you are unable\n            to call init_node from the main thread and/or you are using\n            rospy in an environment where you need to control your own\n            signal handling (e.g. WX). If you set this to True, you should\n            call rospy.signal_shutdown(reason) to initiate clean shutdown.\n    \n            NOTE: disable_signals is overridden to True if\n            roslib.is_interactive() is True.\n    \n        @type  disable_signals: bool\n    \n        @param disable_rostime: for internal testing only: suppresses\n            automatic subscription to rostime\n        @type  disable_rostime: bool\n    \n        @param disable_rosout: for internal testing only: suppress\n            auto-publication of rosout\n        @type  disable_rostime: bool\n    \n        @param xmlrpc_port: If provided, it will use this port number for the client\n            XMLRPC node.\n        @type  xmlrpc_port: int\n    \n        @param tcpros_port: If provided, the TCPROS server will listen for\n            connections on this port\n        @type  tcpros_port: int\n    \n        @raise ROSInitException: if initialization/registration fails\n        @raise ValueError: if parameters are invalid (e.g. name contains a namespace or is otherwise illegal)\n        \"\"\"\n        if argv is None:\n            argv = sys.argv\n        else:\n            # reload the mapping table. Any previously created rospy data\n            # structure does *not* reinitialize based on the new mappings.\n            rospy.names.reload_mappings(argv)\n    \n        if not name:\n            raise ValueError(\"name must not be empty\")\n    \n        # this test can be eliminated once we change from warning to error in the next check\n        if rosgraph.names.SEP in name:\n            raise ValueError(\"namespaces are not allowed in node names\")\n    \n        global _init_node_args\n    \n        # #972: allow duplicate init_node args if calls are identical\n        # NOTE: we don't bother checking for node name aliases (e.g. 'foo' == '/foo').\n        if _init_node_args:\n            if _init_node_args != (name, argv, anonymous, log_level, disable_rostime, disable_signals):\n                raise rospy.exceptions.ROSException(\"rospy.init_node() has already been called with different arguments: \"+str(_init_node_args))\n            else:\n                return #already initialized\n    \n        # for scripting environments, we don't want to use the ROS signal\n        # handlers\n        disable_signals = disable_signals or roslib.is_interactive()\n        _init_node_args = (name, argv, anonymous, log_level, disable_rostime, disable_signals)\n    \n        if not disable_signals:\n            # NOTE: register_signals must be called from main thread\n            rospy.core.register_signals() # add handlers for SIGINT/etc...\n        else:\n            logdebug(\"signal handlers for rospy disabled\")\n    \n        # check for name override\n        mappings = rospy.names.get_mappings()\n        if '__name' in mappings:\n            name = mappings['__name']\n            if anonymous:\n                logdebug(\"[%s] WARNING: due to __name setting, anonymous setting is being changed to false\"%name)\n                anonymous = False\n    \n        if anonymous:\n            # not as good as a uuid/guid, but more readable. can't include\n            # hostname as that is not guaranteed to be a legal ROS name\n            name = \"%s_%s_%s\"%(name, os.getpid(), int(time.time()*1000))\n    \n        # check for legal base name once all changes have been made to the name\n        if not rosgraph.names.is_legal_base_name(name):\n            import warnings\n            warnings.warn(\"'%s' is not a legal ROS base name. This may cause problems with other ROS tools.\"%name, stacklevel=2)\n    \n        # use rosgraph version of resolve_name to avoid remapping\n        resolved_node_name = rosgraph.names.resolve_name(name, rospy.core.get_caller_id())\n        rospy.core.configure_logging(resolved_node_name)\n        # #1810\n        rospy.names.initialize_mappings(resolved_node_name)\n    \n        logger = logging.getLogger(\"rospy.client\")\n        logger.info(\"init_node, name[%s], pid[%s]\", resolved_node_name, os.getpid())\n    \n        # node initialization blocks until registration with master\n        node = rospy.impl.init.start_node(os.environ, resolved_node_name, port=xmlrpc_port, tcpros_port=tcpros_port)\n        rospy.core.set_node_uri(node.uri)\n        rospy.core.add_shutdown_hook(node.shutdown)\n    \n        if rospy.core.is_shutdown():\n            logger.warn(\"aborting node initialization as shutdown has been triggered\")\n            raise rospy.exceptions.ROSInitException(\"init_node interrupted before it could complete\")\n    \n        # upload private params (set via command-line) to parameter server\n        _init_node_params(argv, name)\n    \n        rospy.core.set_initialized(True)\n    \n        if not disable_rosout:\n            rospy.impl.rosout.init_rosout()\n            rospy.impl.rosout.load_rosout_handlers(log_level)\n    \n        if not disable_rostime:\n            if not rospy.impl.simtime.init_simtime():\n>               raise rospy.exceptions.ROSInitException(\"Failed to initialize time. Please check logs for additional details\")\nE               rospy.exceptions.ROSInitException: Failed to initialize time. Please check logs for additional details\n\n/opt/ros/noetic/lib/python3/dist-packages/rospy/client.py:336: ROSInitException"}, "description": "Initializing navigation scenario.\n        ", "start": 1656502205822, "stop": 1656502214255, "uuid": "96c972de-d657-49d5-bd95-810689302902", "historyId": "be8ca0dc772e86020154f3294ac9ad1a", "testCaseId": "1809364b5ba5aa5c893a2c2b31286f64", "fullName": "src.property_based_tester.tests.nav_test.TestNavigation#test_set_up", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('set_up')"}, {"name": "parentSuite", "value": "src.property_based_tester.tests"}, {"name": "suite", "value": "nav_test"}, {"name": "subSuite", "value": "TestNavigation"}, {"name": "host", "value": "legion"}, {"name": "thread", "value": "38969-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.property_based_tester.tests.nav_test"}]}