{"status": "broken", "description": "Activating the pick action test and checking whether it was successful.\n        ", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "complex_test"}, {"name": "subSuite", "value": "TestComplexScenario"}, {"name": "host", "value": "Hyper-Dock"}, {"name": "thread", "value": "32693-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "tests.complex_test"}], "stop": 1608297433081, "uuid": "4b3cba34-b00c-42cc-a3b0-f837cdf4ed80", "historyId": "6df5cbf7c00ce5f14b4c42d69bcd2de9", "name": "test_verification_of_pick_action", "start": 1608297392059, "fullName": "tests.complex_test.TestComplexScenario#test_verification_of_pick_action", "statusDetails": {"message": "LookupException: \"lego\" passed to lookupTransform argument source_frame does not exist.", "trace": "self = <tests.complex_test.TestComplexScenario instance at 0x7f16214be908>\n\n    def test_verification_of_pick_action(self):\n        \"\"\"Activating the pick action test and checking whether it was successful.\n        \"\"\"\n        rgbd = RGBD()\n        move_head_tilt(-0.5)\n        check_output = True\n        while check_output == True:\n            points_data = rgbd.get_points()\n            if points_data  is not None:\n                check_output = False\n        # rgbd.set_h(130, 140)\n        coords = rgbd.get_xyz()\n        print(coords)\n        rgbd.set_coordinate_name(\"lego\")\n    \n>       trans = get_relative_coordinate(\"odom\", \"lego\")\n\ntests/complex_test.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutilities/utils.py:173: in get_relative_coordinate\n    rospy.Duration(4.0))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tf2_ros.buffer.Buffer object at 0x7f162049c440>, target_frame = 'odom'\nsource_frame = 'lego', time = rospy.Time[161931000000]\ntimeout = rospy.Duration[4000000000]\n\n    def lookup_transform(self, target_frame, source_frame, time, timeout=rospy.Duration(0.0)):\n        \"\"\"\n        Get the transform from the source frame to the target frame.\n    \n        :param target_frame: Name of the frame to transform into.\n        :param source_frame: Name of the input frame.\n        :param time: The time at which to get the transform. (0 will get the latest)\n        :param timeout: (Optional) Time to wait for the target frame to become available.\n        :return: The transform between the frames.\n        :rtype: :class:`geometry_msgs.msg.TransformStamped`\n        \"\"\"\n    \n        self.can_transform(target_frame, source_frame, time, timeout)\n>       return self.lookup_transform_core(target_frame, source_frame, time)\nE       LookupException: \"lego\" passed to lookupTransform argument source_frame does not exist.\n\n/opt/ros/kinetic/lib/python2.7/dist-packages/tf2_ros/buffer.py:87: LookupException"}, "attachments": [{"source": "e200b82b-756e-4be6-aef1-85173f05d90e-attachment.txt", "type": "text/plain", "name": "log"}, {"source": "5392cba6-985c-4409-8059-34c889a71541-attachment.txt", "type": "text/plain", "name": "stdout"}, {"source": "d92c1514-868b-4385-acfe-152c3c8acd1a-attachment.txt", "type": "text/plain", "name": "stderr"}]}