{"status": "broken", "description": "Initialzing parameters for testing.\n        ", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "complex_test"}, {"name": "subSuite", "value": "TestPerception"}, {"name": "host", "value": "Hyper-Dock"}, {"name": "thread", "value": "9013-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "tests.complex_test"}], "stop": 1608219547306, "uuid": "d6cad02b-ec9c-4c16-8343-5af384cc7c36", "historyId": "effeafc46fba316bab86f962fc856697", "name": "test_set_up", "start": 1608219547292, "fullName": "tests.complex_test.TestPerception#test_set_up", "statusDetails": {"message": "TypeError: argument 1 must be string or buffer, not None", "trace": "self = <tests.complex_test.TestPerception instance at 0x7f279f74b560>, randomizer = <function _parameters at 0x7f279f75b848>\n\n    def test_set_up(self,randomizer):\n        \"\"\"Initialzing parameters for testing.\n        \"\"\"\n        self.config = Configuration()\n        logs = self.config.config_data_frame('nav_end')\n        data = logs.to_csv('tests/results/configuration_data.csv',index=False)\n    \n        # Adding the configuration file\n        # data = {'First Column Name':  ['First value', 'Second value'],\n        # 'Second Column Name': ['First value', 'Second value']}\n        # df = pd.DataFrame (data, columns = ['First Column Name','Second Column Name'])\n        # data = df.to_csv(index=False)\n>       allure.attach(data, 'Configuration', allure.attachment_type.CSV)\n\ntests/complex_test.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python2.7/dist-packages/allure_commons/_allure.py:148: in __call__\n    plugin_manager.hook.attach_data(body=body, name=name, attachment_type=attachment_type, extension=extension)\n/usr/local/lib/python2.7/dist-packages/pluggy/hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n/usr/local/lib/python2.7/dist-packages/pluggy/manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n/usr/local/lib/python2.7/dist-packages/pluggy/manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n/usr/local/lib/python2.7/dist-packages/allure_pytest/listener.py:207: in attach_data\n    self.allure_logger.attach_data(uuid4(), body, name=name, attachment_type=attachment_type, extension=extension)\n/usr/local/lib/python2.7/dist-packages/allure_commons/reporter.py:117: in attach_data\n    plugin_manager.hook.report_attached_data(body=body, file_name=file_name)\n/usr/local/lib/python2.7/dist-packages/pluggy/hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n/usr/local/lib/python2.7/dist-packages/pluggy/manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n/usr/local/lib/python2.7/dist-packages/pluggy/manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.logger.AllureFileLogger object at 0x7f27a9fed450>, body = None, file_name = '188042b2-39bd-4571-b9b7-52568f8e86d8-attachment.csv'\n\n    @hookimpl\n    def report_attached_data(self, body, file_name):\n        destination = os.path.join(self._report_dir, file_name)\n        with open(destination, 'wb') as attached_file:\n            if isinstance(body, text_type):\n                attached_file.write(body.encode('utf-8'))\n            else:\n>               attached_file.write(body)\nE               TypeError: argument 1 must be string or buffer, not None\n\n/usr/local/lib/python2.7/dist-packages/allure_commons/logger.py:57: TypeError"}, "attachments": [{"source": "188042b2-39bd-4571-b9b7-52568f8e86d8-attachment.csv", "type": "text/csv", "name": "Configuration"}, {"source": "b508a3fd-eedc-446d-9929-05e4bb0d0a3f-attachment.txt", "type": "text/plain", "name": "log"}, {"source": "22484210-b9f0-4880-9587-cdeb312842dd-attachment.txt", "type": "text/plain", "name": "stdout"}, {"source": "f124c73b-0216-4212-bfc4-724b361353db-attachment.txt", "type": "text/plain", "name": "stderr"}]}