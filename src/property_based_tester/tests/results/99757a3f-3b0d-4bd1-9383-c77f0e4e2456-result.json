{"status": "broken", "description": " Checking if the position of objects changed during pick action i.e. Lucy collided with an obstacle.\n        ", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "pick_test"}, {"name": "subSuite", "value": "TestPickAction"}, {"name": "host", "value": "Hyper-Dock"}, {"name": "thread", "value": "22076-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "tests.pick_test"}], "stop": 1607987268951, "uuid": "598f2e54-7f90-4e7f-8eca-aa6ba52b57a1", "historyId": "8b04db5b2b38afdee52d2264a3c699b8", "name": "test_collision_detection", "start": 1607987268893, "fullName": "tests.pick_test.TestPickAction#test_collision_detection", "statusDetails": {"message": "ValueError: Can only compare identically-labeled Series objects", "trace": "self = <tests.pick_test.TestPickAction instance at 0x7fa597385368>\n\n    def test_collision_detection(self):\n        \"\"\" Checking if the position of objects changed during pick action i.e. Lucy collided with an obstacle.\n        \"\"\"\n        # True means no change and false means there is change.\n        x = False\n        y = False\n        z = False\n>       lower_tolerance_difference, upper_tolerance_difference = log_reader_comparator('X-pos', 'pick_action_start', 'pick_action_end')\n\ntests/pick_test.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlogger/data_logger.py:142: in log_reader_comparator\n    newp['8'] = np.where(nswp[loc]-0.1<=newp[loc], 1, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Models\nground_plane      -0.100\nroom              -0.100\ntable223          -0....7\nminicoffeetable    0.703\nglass              0.653\nName: X-pos, dtype: float64\nother = Models\nground_plane       0.000\nroom               0.000\ntable813          -0....4\nminicoffeetable    0.803\nglass              0.465\nName: X-pos, dtype: float64\naxis = None\n\n    def wrapper(self, other, axis=None):\n        # Validate the axis parameter\n        if axis is not None:\n            self._get_axis_number(axis)\n    \n        res_name = get_op_result_name(self, other)\n    \n        if isinstance(other, list):\n            # TODO: same for tuples?\n            other = np.asarray(other)\n    \n        if isinstance(other, ABCDataFrame):  # pragma: no cover\n            # Defer to DataFrame implementation; fail early\n            return NotImplemented\n    \n        elif isinstance(other, ABCSeries) and not self._indexed_same(other):\n>           raise ValueError(\"Can only compare identically-labeled \"\n                             \"Series objects\")\nE           ValueError: Can only compare identically-labeled Series objects\n\n/usr/local/lib/python2.7/dist-packages/pandas/core/ops.py:1676: ValueError"}, "attachments": [{"source": "f5b735a8-797c-4c5b-9307-e399d3a8a9d9-attachment.txt", "type": "text/plain", "name": "log"}, {"source": "ca2ed277-06b9-4d94-8753-b3d21a355b6e-attachment.txt", "type": "text/plain", "name": "stdout"}, {"source": "be068219-3ea0-4c1e-bc3b-051ddac093f8-attachment.txt", "type": "text/plain", "name": "stderr"}]}