{"status": "broken", "description": " Checking if the position of objects changed furing navigation i.e. Lucy collided with an obstacle.\n        ", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "complex_test"}, {"name": "subSuite", "value": "TestComplexScenario"}, {"name": "host", "value": "Hyper-Dock"}, {"name": "thread", "value": "27921-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "tests.complex_test"}], "stop": 1608379754575, "uuid": "0da9d2f0-8939-45aa-85d0-f19f80d3b86c", "historyId": "e9fa13ce51281001c774d2b588a2186f", "name": "test_collision_detection", "start": 1608379754494, "fullName": "tests.complex_test.TestComplexScenario#test_collision_detection", "statusDetails": {"message": "ValueError: Can only compare identically-labeled Series objects", "trace": "self = <tests.complex_test.TestComplexScenario instance at 0x7faef76ae878>\n\n    def test_collision_detection(self):\n        \"\"\" Checking if the position of objects changed furing navigation i.e. Lucy collided with an obstacle.\n        \"\"\"\n>       lower_tolerance_difference, upper_tolerance_difference = log_reader_comparator('X-pos', 'nav_start', 'nav_end')\n\ntests/complex_test.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlogger/data_logger.py:142: in log_reader_comparator\n    newp['8'] = np.where(nswp[loc]-0.05<=newp[loc], 1, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Models\nground_plane    -0.050\nroom            -0.050\ntable528        -0.050\nsh...0.951\nfork130          0.151\nbottle72        -0.073\nName: X-pos, dtype: float64\nother = Models\nground_plane     0.000\nroom             0.000\ntable337        -0.000\nsh...0.793\nsaltshaker130    1.162\nglass254         0.530\nName: X-pos, dtype: float64\naxis = None\n\n    def wrapper(self, other, axis=None):\n        # Validate the axis parameter\n        if axis is not None:\n            self._get_axis_number(axis)\n    \n        res_name = get_op_result_name(self, other)\n    \n        if isinstance(other, list):\n            # TODO: same for tuples?\n            other = np.asarray(other)\n    \n        if isinstance(other, ABCDataFrame):  # pragma: no cover\n            # Defer to DataFrame implementation; fail early\n            return NotImplemented\n    \n        elif isinstance(other, ABCSeries) and not self._indexed_same(other):\n>           raise ValueError(\"Can only compare identically-labeled \"\n                             \"Series objects\")\nE           ValueError: Can only compare identically-labeled Series objects\n\n/usr/local/lib/python2.7/dist-packages/pandas/core/ops.py:1676: ValueError"}, "attachments": [{"source": "9aac2796-450f-4a5a-b95e-3e150fd13467-attachment.txt", "type": "text/plain", "name": "log"}, {"source": "c6eb6bff-1861-4540-8994-f331cbd28c29-attachment.txt", "type": "text/plain", "name": "stdout"}, {"source": "77e9837b-0ac3-457b-9b0e-a728b7131465-attachment.txt", "type": "text/plain", "name": "stderr"}]}