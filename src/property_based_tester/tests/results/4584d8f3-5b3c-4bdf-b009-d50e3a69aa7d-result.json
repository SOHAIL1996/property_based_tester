{"status": "broken", "description": "Activating the pick action test and checking whether it was successful.\n        ", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "complex_test"}, {"name": "subSuite", "value": "TestComplexScenario"}, {"name": "host", "value": "Hyper-Dock"}, {"name": "thread", "value": "27523-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "tests.complex_test"}], "stop": 1608382191770, "uuid": "a0d28aa4-e4ea-40b1-b85d-fdca88754eb5", "historyId": "6df5cbf7c00ce5f14b4c42d69bcd2de9", "name": "test_verification_of_pick_action", "start": 1608382189447, "fullName": "tests.complex_test.TestComplexScenario#test_verification_of_pick_action", "statusDetails": {"message": "ResourceNotFoundError", "trace": "self = <tests.complex_test.TestComplexScenario instance at 0x7f544b579050>\n\n    def test_verification_of_pick_action(self):\n        \"\"\"Activating the pick action test and checking whether it was successful.\n        \"\"\"\n        data_logger('logger/logs/pick_action_start')\n        attempt = 0\n        while attempt<15:\n            try:\n                result = MoveItPickAndPlace(pick_x = -0.03, pick_y = 0.96 , pick_z = 0.56,\n>                                           place_x = 0.5, place_y = 1.0 , place_z = 0.65)\n\ntests/complex_test.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/action_client/experimental_pick_place_client.py:26: in MoveItPickAndPlace\n    whole_body.collision_world  = hsrb_interface.collision_world.CollisionWorld('add_box')\n/opt/ros/kinetic/lib/python2.7/dist-packages/hsrb_interface/collision_world.py:53: in __init__\n    self._setting = settings.get_entry('collision_world', name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsection = 'collision_world', name = 'add_box'\n\n    def get_entry(section, name):\n        \"\"\"Get an entry in robot setting dictionary.\n    \n        Args:\n            section (str): A section name.\n            name (str): A resource name.\n    \n        Returns:\n            Dict[str, JSON Data]: A corresponding settings.\n    \n        Raises:\n            hsrb_interface.exceptions.ResourceNotFoundError:\n                A resource which has name `name` does not exist.\n        \"\"\"\n        if section in _SETTINGS:\n            result = _SETTINGS[section].get(name, None)\n            if result is None:\n                msg = \"{0}({1}) is not found\".format(section, name)\n>               raise exceptions.ResourceNotFoundError()\nE               ResourceNotFoundError\n\n/opt/ros/kinetic/lib/python2.7/dist-packages/hsrb_interface/settings.py:241: ResourceNotFoundError"}, "attachments": [{"source": "f87173c3-0cfc-496d-ace9-94124c89fb7e-attachment.txt", "type": "text/plain", "name": "log"}, {"source": "d08eb372-d719-4cf8-91d4-975090b0d07c-attachment.txt", "type": "text/plain", "name": "stdout"}, {"source": "b442d709-6ffc-4ea2-866a-7a2b0d6d6709-attachment.txt", "type": "text/plain", "name": "stderr"}]}