{"status": "broken", "description": "Activating the pick action test and checking whether it was successful.\n        ", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "complex_test"}, {"name": "subSuite", "value": "TestComplexScenario"}, {"name": "host", "value": "Hyper-Dock"}, {"name": "thread", "value": "25796-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "tests.complex_test"}], "stop": 1608335934122, "uuid": "05918d85-b21f-4147-a073-564f3216718a", "historyId": "6df5cbf7c00ce5f14b4c42d69bcd2de9", "name": "test_verification_of_pick_action", "start": 1608335931416, "fullName": "tests.complex_test.TestComplexScenario#test_verification_of_pick_action", "statusDetails": {"message": "MotionPlanningError: GOAL_IN_COLLISION (Fail to plan change_joint_state)", "trace": "self = <tests.complex_test.TestComplexScenario instance at 0x7f25bcdab680>\n\n    def test_verification_of_pick_action(self):\n        \"\"\"Activating the pick action test and checking whether it was successful.\n        \"\"\"\n        data_logger('logger/logs/pick_action_start')\n        # Pick from table and place on table\n        result = MoveItPickAndPlace(pick_x = -0.03, pick_y = 0.96 , pick_z = 0.57,\n>                                   place_x = 0.5, place_y = 1.0 , place_z = 0.6)\n\ntests/complex_test.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/action_client/experimental_pick_place_client.py:28: in MoveItPickAndPlace\n    \"head_pan_joint\": 0})\n/opt/ros/kinetic/lib/python2.7/dist-packages/hsrb_interface/joint_group.py:476: in move_to_joint_positions\n    self._change_joint_state(goal_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <hsrb_interface.joint_group.JointGroup object at 0x7f25bbf80cd0>\ngoal_state = header: \n  seq: 0\n  stamp: \n    secs: 0\n    nsecs:         0\n  frame_id: ''\nname: [head_pan_joint, head_tilt_joint]\nposition: [0, -3]\nvelocity: []\neffort: []\n\n    def _change_joint_state(self, goal_state):\n        \"\"\"Move joints to specified joint state while checking self collision.\n    \n        Args:\n            goal_state (sensor_msgs.msg.JointState): Target joint state\n        Returns:\n            None\n        Raises:\n            ValueError: Some specified joints are not found.\n            ValueError: Target joints include some uncontrollable joints.\n        \"\"\"\n        # Validate joint names\n        initial_joint_state = self._get_joint_state()\n        active_joint_set = set(initial_joint_state.name)\n        target_joint_set = set(goal_state.name)\n        if not target_joint_set.issubset(active_joint_set):\n            unknown_set = target_joint_set.difference(active_joint_set)\n            msg = \"No such joint(s): [{0}]\".format(', '.join(unknown_set))\n            raise ValueError(msg)\n        if 'base_roll_joint' in target_joint_set:\n            raise ValueError(\n                \"base_roll_joint is not supported in change_joint_state\")\n        passive_joint_set = set(self._passive_joints)\n        if not target_joint_set.isdisjoint(passive_joint_set):\n            intersected = target_joint_set.intersection(passive_joint_set)\n            msg = \"Passive joint(s): [{0}]\".format(', '.join(intersected))\n            raise ValueError(msg)\n    \n        req = self._generate_planning_request(PlanWithJointGoalsRequest)\n        goal_position = JointPosition()\n        goal_position.position = goal_state.position\n        req.use_joints = goal_state.name\n        req.goal_joint_states.append(goal_position)\n    \n        service_name = self._setting['plan_with_joint_goals_service']\n        plan_service = rospy.ServiceProxy(service_name, PlanWithJointGoals)\n        res = plan_service.call(req)\n        if res.error_code.val != ArmManipulationErrorCodes.SUCCESS:\n            msg = \"Fail to plan change_joint_state\"\n>           raise exceptions.MotionPlanningError(msg, res.error_code)\nE           MotionPlanningError: GOAL_IN_COLLISION (Fail to plan change_joint_state)\n\n/opt/ros/kinetic/lib/python2.7/dist-packages/hsrb_interface/joint_group.py:425: MotionPlanningError"}, "attachments": [{"source": "fd76bc0c-7bd3-40ba-876b-a2d332a4d856-attachment.txt", "type": "text/plain", "name": "log"}, {"source": "911772d2-58e7-47f1-9df2-03a274017a76-attachment.txt", "type": "text/plain", "name": "stdout"}, {"source": "43198aa7-e7bd-450b-8d91-42abd861d904-attachment.txt", "type": "text/plain", "name": "stderr"}]}